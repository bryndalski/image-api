import { RemovalPolicy, Stack, StackProps } from "aws-cdk-lib";
import { Construct } from "constructs";
import { Bucket } from "aws-cdk-lib/aws-s3";
import { Effect, FederatedPrincipal, PolicyStatement } from "aws-cdk-lib/aws-iam";
import { UserPool } from "aws-cdk-lib/aws-cognito";

interface BucketStackProps extends StackProps {
  cognito: UserPool;
}

export class Bucket_stack extends Stack {

  bucket: Bucket;
  cognito: UserPool;

  constructor(scope: Construct, id: string, props?: BucketStackProps) {
    super(scope, id, props);
    this.cognito = props!.cognito;
    this.createBucketStack();
    this.setIamPolicy();
  }


  /**
   * Creates new bucket for `s3`
   * @private
   */
  private createBucketStack() {
    this.bucket = new Bucket(this, "ImageApiBucket", {
      bucketName: "image-api-bucket",
      removalPolicy: RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
      versioned: true
    });
  }

  /**
   * Adds new police to bucket
   * @private
   * @description
   * - User can only list and edit their own file
   * because of public url generated by aws bucket, there is no need to
   * host public endpoint for receiving images,
   * as long as proper IAM permissions are set
   */
  private setIamPolicy() {
    this.bucket.addToResourcePolicy(
      new PolicyStatement({
        sid: "AllowRootUserFullAccessToObjectsInBucket",
        actions: ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
        effect: Effect.ALLOW,
        principals: [
          new FederatedPrincipal("cognito-identity.amazonaws.com")
        ],
        resources: [
          `${this.bucket.bucketArn}/\${cognito-identity.amazonaws.com:sub}/*`
        ],
        conditions: {
          StringEquals: {
            "aws:userid": "${cognito-identity.amazonaws.com:sub}"
          }
        }
      })
    );
  }
}